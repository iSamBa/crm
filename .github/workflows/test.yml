name: Test Suite

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Create test environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_SUPABASE_URL=https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY=test-anon-key
          SUPABASE_SERVICE_ROLE_KEY=test-service-key
          # Tests use MSW mocks - these are fallback values
          EOF

      - name: Run tests with coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false
        continue-on-error: true

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create test environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.TEST_SUPABASE_URL || 'https://demo.supabase.co' }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.TEST_SUPABASE_ANON_KEY || 'demo-anon-key' }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.TEST_SUPABASE_SERVICE_KEY || 'demo-service-key' }}
          EOF

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run dependency scan
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

  build-test:
    name: Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cat > .env.local << EOF
          NEXT_PUBLIC_SUPABASE_URL=https://test.supabase.co
          NEXT_PUBLIC_SUPABASE_ANON_KEY=test-anon-key
          SUPABASE_SERVICE_ROLE_KEY=test-service-key
          EOF

      - name: Build application
        run: npm run build

      - name: Check for build artifacts
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, security-scan, build-test]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          
          if [[ "${{ needs.unit-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.security-scan.result }}" == "failure" ]] || 
             [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "One or more test jobs failed"
            exit 1
          fi
          
          echo "All tests passed successfully!"